import * as React from 'react';
import { CommonControlledProps, SwitchShape } from '../types/CommonProps';
import { CheckboxState } from './Checkbox';
import { RadioState } from './Radio';
export declare type SwitchState = CheckboxState | RadioState;
export declare type SwitchProps = CommonControlledProps<SwitchState> & {
    shape?: SwitchShape;
};
export declare const useSwitchState: ({ type, state: initialState, }?: {
    type?: "checkbox" | "radio" | undefined;
    state?: any;
}) => ({
    type: "checkbox" | "radio";
} & {
    baseId: string;
    state: CheckboxState;
    setState: React.Dispatch<React.SetStateAction<CheckboxState>>;
    onChange: (e: React.ChangeEvent<HTMLInputElement>, args?: any) => void;
}) | ({
    type: "checkbox" | "radio";
} & {
    baseId: string;
    state: string | boolean;
    setState: React.Dispatch<React.SetStateAction<string | boolean>>;
    onChange: (e: React.ChangeEvent<HTMLInputElement>, args?: string | boolean | undefined) => void;
});
export declare const Switch: React.ForwardRefExoticComponent<React.InputHTMLAttributes<HTMLInputElement> & {
    state: SwitchState;
    setState?: React.Dispatch<React.SetStateAction<SwitchState>> | undefined;
    onChange: (e: React.ChangeEvent<HTMLInputElement>, value?: any) => void;
    color?: "success" | "primary" | "warning" | "info" | "danger" | "primary-o" | "success-o" | "warning-o" | "info-o" | "danger-o" | undefined;
    locked?: boolean | undefined;
    bigger?: boolean | undefined;
    className?: string | undefined;
    type?: "checkbox" | "radio" | undefined;
    baseId?: string | undefined;
} & {
    shape?: "fill" | "outline" | "slim" | undefined;
} & React.RefAttributes<HTMLInputElement>>;
//# sourceMappingURL=Switch.d.ts.map