/// <reference types="react" />
import { PrettyProps } from '../Pretty';
/**
 * A fairly gross way of organizing props so we don't unintentionally pass
 * props to native HTML elements.
 */
export declare const organizeProps: (props: PrettyProps) => {
    pcrProps: {
        animation: "smooth" | "jelly" | "tada" | "rotate" | "pulse" | undefined;
        bigger: boolean | undefined;
        plain: boolean | undefined;
        shape: "square" | "round" | "fill" | "curve" | "outline" | "slim" | undefined;
        fill: "thick" | "fill" | undefined;
        iconType: "image" | "svg" | "icon" | undefined;
        isSwitch: boolean | undefined;
        setState: import("react").Dispatch<any> | undefined;
        className: string | undefined;
    };
    inputProps: {
        onChange: ((event: import("react").ChangeEvent<HTMLInputElement>) => void) & ((e: import("react").ChangeEvent<HTMLInputElement>, value?: any) => void);
        disabled: boolean | undefined;
        value: string | number | string[] | undefined;
        state: any;
        locked: boolean | undefined;
        type: "checkbox" | "radio" | undefined;
        name: string | undefined;
        checked: boolean | undefined;
        baseId: string | undefined;
        defaultValue: string | number | string[] | undefined;
        defaultChecked: boolean | undefined;
    };
    labelProps: {
        children: import("react").ReactNode;
        baseId: string | undefined;
        color: "success" | "primary" | "warning" | "info" | "danger" | "primary-o" | "success-o" | "warning-o" | "info-o" | "danger-o" | undefined;
        icon: import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)> | undefined;
    };
    htmlProps: Record<string, any>;
};
//# sourceMappingURL=propUtils.d.ts.map