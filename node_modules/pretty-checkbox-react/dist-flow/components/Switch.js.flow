import * as React from "react";
import { CommonControlledProps, SwitchShape } from "../types/CommonProps";
import { CheckboxState } from "./Checkbox";
import { RadioState } from "./Radio";
export type SwitchState = CheckboxState | RadioState;
export type SwitchProps = CommonControlledProps<SwitchState> & {
  shape?: SwitchShape,
  ...
};
declare export var useSwitchState: (x?: {
  type?: "checkbox" | "radio" | void,
  state?: any,
  ...
}) =>
  | ({
      type: "checkbox" | "radio",
      ...
    } & {
      baseId: string,
      state: CheckboxState,
      setState: React.Dispatch<React.SetStateAction<CheckboxState>>,
      onChange: (e: React.ChangeEvent<HTMLInputElement>, args?: any) => void,
      ...
    })
  | ({
      type: "checkbox" | "radio",
      ...
    } & {
      baseId: string,
      state: string | boolean,
      setState: React.Dispatch<React.SetStateAction<string | boolean>>,
      onChange: (
        e: React.ChangeEvent<HTMLInputElement>,
        args?: string | boolean | void
      ) => void,
      ...
    });
declare export var Switch: React.ForwardRefExoticComponent<
  React.InputHTMLAttributes<HTMLInputElement> & {
    state: SwitchState,
    setState?: React.Dispatch<React.SetStateAction<SwitchState>> | void,
    onChange: (e: React.ChangeEvent<HTMLInputElement>, value?: any) => void,
    color?:
      | "success"
      | "primary"
      | "warning"
      | "info"
      | "danger"
      | "primary-o"
      | "success-o"
      | "warning-o"
      | "info-o"
      | "danger-o"
      | void,
    locked?: boolean | void,
    bigger?: boolean | void,
    className?: string | void,
    type?: "checkbox" | "radio" | void,
    baseId?: string | void,
    ...
  } & {
    shape?: "fill" | "outline" | "slim" | void,
    ...
  } & React.RefAttributes<HTMLInputElement>
>;
